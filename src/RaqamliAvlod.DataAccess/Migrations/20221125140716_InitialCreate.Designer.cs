// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RaqamliAvlod.DataAccess.DbContexts;

#nullable disable

namespace RaqamliAvlod.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221125140716_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Contests.Contest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("calculated_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_calculated");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("contests");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Contests.ContestStanding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContestId")
                        .HasColumnType("bigint")
                        .HasColumnName("contest_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Penalty")
                        .HasColumnType("integer")
                        .HasColumnName("penalty");

                    b.Property<int>("ResultCoins")
                        .HasColumnType("integer")
                        .HasColumnName("result_coins");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("UserId", "ContestId")
                        .IsUnique();

                    b.ToTable("contest_standings");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Contests.ContestStandingDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContestStandingId")
                        .HasColumnType("bigint")
                        .HasColumnName("contest_standing_id");

                    b.Property<TimeOnly>("FixedTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("fixed_time");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fixed");

                    b.Property<short>("PenaltySubmissions")
                        .HasColumnType("smallint")
                        .HasColumnName("penalty_submissions");

                    b.Property<long>("ProblemSetId")
                        .HasColumnType("bigint")
                        .HasColumnName("problemset_id");

                    b.HasKey("Id");

                    b.HasIndex("ContestStandingId");

                    b.HasIndex("ProblemSetId", "ContestStandingId")
                        .IsUnique();

                    b.ToTable("contest_standing_details");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Courses.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("info");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Courses.CourseComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment_text");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("OwnerId");

                    b.ToTable("course_comments");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Courses.CourseVideo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("duration");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer")
                        .HasColumnName("view_count");

                    b.Property<string>("YouTubeLink")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("youtube_link");

                    b.Property<string>("YouTubeThumbnail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("youtube_thumb");

                    b.HasKey("Id");

                    b.HasIndex("CourseId", "YouTubeLink")
                        .IsUnique();

                    b.ToTable("course_videos");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.ProblemSets.ProblemSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("ContestCoins")
                        .HasColumnType("smallint")
                        .HasColumnName("contest_coins");

                    b.Property<long>("ContestId")
                        .HasColumnType("bigint")
                        .HasColumnName("contest_id");

                    b.Property<char>("ContestIdentifier")
                        .HasColumnType("character(1)")
                        .HasColumnName("contest_identifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<short>("Difficulty")
                        .HasColumnType("smallint")
                        .HasColumnName("difficulty");

                    b.Property<string>("InputDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("input_desciption");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<int>("MemoryLimit")
                        .HasColumnType("integer")
                        .HasColumnName("memory_limit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("OutputDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("output_desciption");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("integer")
                        .HasColumnName("time_limit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.HasIndex("ContestIdentifier", "ContestId")
                        .IsUnique();

                    b.ToTable("problemsets");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.ProblemSets.ProblemSetTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("input");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("output");

                    b.Property<long>("ProblemSetId")
                        .HasColumnType("bigint")
                        .HasColumnName("problemset_id");

                    b.HasKey("Id");

                    b.HasIndex("ProblemSetId");

                    b.ToTable("problemset_tests");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Questions.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer")
                        .HasColumnName("view_count");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Questions.QuestionAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("HasReplied")
                        .HasColumnType("boolean")
                        .HasColumnName("has_replied");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentId");

                    b.HasIndex("QuestionId");

                    b.ToTable("qestion_answers");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Questions.QuestionTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TagId", "QuestionId")
                        .IsUnique();

                    b.ToTable("question_tags");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Questions.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer")
                        .HasColumnName("view_count");

                    b.HasKey("Id");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.ToTable("tags");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Submissions.Submission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ContestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ExecutionTime")
                        .HasColumnType("integer");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LengthOfCode")
                        .HasColumnType("integer");

                    b.Property<int>("MemoryUsage")
                        .HasColumnType("integer");

                    b.Property<long>("ProblemSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("ProblemSetId");

                    b.HasIndex("UserId");

                    b.ToTable("submissions");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ContestCoins")
                        .HasColumnType("integer")
                        .HasColumnName("contest_coins");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int>("ProblemSetCoins")
                        .HasColumnType("integer")
                        .HasColumnName("problemset_coins");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Contests.ContestStanding", b =>
                {
                    b.HasOne("RaqamliAvlod.Domain.Entities.Contests.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaqamliAvlod.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Contests.ContestStandingDetail", b =>
                {
                    b.HasOne("RaqamliAvlod.Domain.Entities.Contests.ContestStanding", "ContestStanding")
                        .WithMany()
                        .HasForeignKey("ContestStandingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaqamliAvlod.Domain.Entities.ProblemSets.ProblemSet", "ProblemSet")
                        .WithMany()
                        .HasForeignKey("ProblemSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContestStanding");

                    b.Navigation("ProblemSet");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Courses.Course", b =>
                {
                    b.HasOne("RaqamliAvlod.Domain.Entities.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Courses.CourseComment", b =>
                {
                    b.HasOne("RaqamliAvlod.Domain.Entities.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaqamliAvlod.Domain.Entities.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Courses.CourseVideo", b =>
                {
                    b.HasOne("RaqamliAvlod.Domain.Entities.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.ProblemSets.ProblemSet", b =>
                {
                    b.HasOne("RaqamliAvlod.Domain.Entities.Contests.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaqamliAvlod.Domain.Entities.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.ProblemSets.ProblemSetTest", b =>
                {
                    b.HasOne("RaqamliAvlod.Domain.Entities.ProblemSets.ProblemSet", "ProblemSet")
                        .WithMany()
                        .HasForeignKey("ProblemSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProblemSet");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Questions.Question", b =>
                {
                    b.HasOne("RaqamliAvlod.Domain.Entities.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Questions.QuestionAnswer", b =>
                {
                    b.HasOne("RaqamliAvlod.Domain.Entities.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaqamliAvlod.Domain.Entities.Questions.QuestionAnswer", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("RaqamliAvlod.Domain.Entities.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Parent");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Questions.QuestionTag", b =>
                {
                    b.HasOne("RaqamliAvlod.Domain.Entities.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaqamliAvlod.Domain.Entities.Questions.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("RaqamliAvlod.Domain.Entities.Submissions.Submission", b =>
                {
                    b.HasOne("RaqamliAvlod.Domain.Entities.Contests.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId");

                    b.HasOne("RaqamliAvlod.Domain.Entities.ProblemSets.ProblemSet", "ProblemSet")
                        .WithMany()
                        .HasForeignKey("ProblemSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaqamliAvlod.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("ProblemSet");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
